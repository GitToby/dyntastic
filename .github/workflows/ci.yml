name: CI

on: [push, pull_request]

jobs:
  test:
    name: "Test Python ${{ matrix.python-version }} (${{ (matrix.pin-versions == '' && 'Latest Dependencies') || 'Compatibility Check' }})"
    timeout-minutes: 5
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11']
        pin-versions: ["", "boto3==1.10.0 pydantic==1.7.1 \\\"importlib_metadata==1.0.0; python_version<'3.8'\\\""]

    env:
      PYTHON: ${{ matrix.python-version }}

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: set up python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: install
      run: 'make install-dev ARGS="${{ matrix.pin-versions }}"'
    - name: Lint
      run: make lint
    - name: test
      run: make test
    - name: coverage
      run: make coverage

    - uses: codecov/codecov-action@v3
      with:
        file: coverage.xml
        env_vars: PYTHON

  deploy:
    name: Build and Deploy
    needs: test
    if: "success() && startsWith(github.ref, 'refs/tags/')"
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: set up python
      uses: actions/setup-python@v4
      with:
        python-version: 3.7

    - name: install
      run: make install-deploy

    - name: build
      run: make build

    - name: upload to pypi
      run: twine upload dist/*
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.pypi_token }}
